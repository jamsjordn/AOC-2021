{
  "overrides": [
    {
      "files": [
        "*.ts",
        "*.tsx"
      ],
      "extends": [
        "./base.eslintrc.json"
      ],
      "plugins": [
        "@typescript-eslint",
        "@typescript-eslint/tslint"
      ],
      "parserOptions": {
        "sourceType": "module",
        "project": [
          "**/tsconfig.*?.json"
        ]
      },
      "rules": {
        // If left on this will trigger lies in imports
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": [
          "warn",
          {
            "argsIgnorePattern": "^_"
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "class",
            "format": [
              "PascalCase"
            ]
          }
        ],
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": "error",
        "@typescript-eslint/ban-types": "error",
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/explicit-member-accessibility": [
          "warn",
          {
            "accessibility": "explicit",
            "ignoredMethodNames": [
              "ngAfterContentChecked",
              "ngAfterContentInit",
              "ngAfterViewChecked",
              "ngAfterViewInit",
              "ngDoBootstrap",
              "ngDoCheck",
              "ngOnChanges",
              "ngOnDestroy",
              "ngOnInit"
            ],
            "overrides": {
              "accessors": "explicit",
              "constructors": "no-public",
              "methods": "explicit",
              "properties": "explicit",
              "parameterProperties": "explicit"
            }
          }
        ],
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          {
            "allowExpressions": true
          }
        ],
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/member-delimiter-style": [
          "error",
          {
            "multiline": {
              "delimiter": "semi",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "semi",
              "requireLast": false
            }
          }
        ],
        "@typescript-eslint/member-ordering": [
          "warn",
          {
            "default": [
              "static-field",
              "instance-field",
              "static-method",
              "instance-method"
            ]
          }
        ],
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-floating-promises": "warn",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-misused-promises": [
          "warn",
          {
            "checksVoidReturn": {
              "variables": false,
              "arguments": false
            }
          }
        ],
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-parameter-properties": "off",
        // note you must disable the base rule as it can report incorrect errors
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": [
          "error",
          {
            "ignoreTypeValueShadow": true
          }
        ],
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/prefer-for-of": "off",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        "quotes": "off",
        "@typescript-eslint/quotes": [
          "error",
          "single",
          {
            "avoidEscape": true,
            "allowTemplateLiterals": true
          }
        ],
        "@typescript-eslint/semi": [
          "error",
          "always"
        ],
        "@typescript-eslint/switch-exhaustiveness-check": "error",
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/unified-signatures": "error",
        "max-classes-per-file": [
          "error",
          4
        ],
        "sort-imports": [
          "error",
          {
            "ignoreDeclarationSort": true,
            "ignoreMemberSort": true
          }
        ],
        "@typescript-eslint/tslint/config": [
          "warn",
          {
            "rules": {
              "@angular-eslint/directive-selector": [
                "error",
                {
                  "type": "attribute",
                  "prefix": "cb",
                  "style": "camelCase"
                }
              ],
              "@angular-eslint/component-selector": [
                "error",
                {
                  "type": "element",
                  "prefix": "cb",
                  "style": "kebab-case"
                }
              ],
              "no-reference-import": true,
              "one-line": [
                true,
                "check-open-brace",
                "check-catch",
                "check-else",
                "check-whitespace"
              ]
            }
          }
        ],
        "no-trailing-spaces": "error",
        // This can be turned off for typescript to allow overloading and ts compiler deals with dupes that aren't for overloading
        "no-dupe-class-members": "off"
      }
    }
  ]
}